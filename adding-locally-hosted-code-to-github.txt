   #alternate alternate alternate alternate alternate alternate alternate alternate alternate

   Skip to main content

   GitHub Docs
   (BUTTON) Version: Free, Pro, & Team
   Search GitHub Docs ____________________ (BUTTON)
   (BUTTON)
   (BUTTON) (BUTTON)
   (BUTTON)
   (BUTTON)

     * Migrations/
     * Import source code/
     * Command line/
     * Local code

   All products
   Migrations

     * Overview
     * Import source code
          + GitHub Importer
          + Command line
               o About source code imports
               o Local code
               o External Git repo
               o Subversion
               o Mercurial
               o Team Foundation Version Control
     * GitHub Enterprise Importer
     * ghe-migrator

     * Migrations/
     * Import source code/
     * Command line/
     * Local code

Adding locally hosted code to GitHub

In this article

     * About adding existing source code to GitHub
     * Initializing a Git repository
     * Importing a Git repository with the command line
     * Further reading

   If your code is stored locally on your computer and is tracked by Git or not tracked by any version control
   system (VCS), you can import the code to GitHub using GitHub CLI or Git commands.

   MacWindowsLinux

About adding existing source code to GitHub

   If you have source code stored locally on your computer that is tracked by Git or not tracked by any version
   control system (VCS), you can add the code to GitHub by typing commands in a terminal. You can do this by
   typing Git commands directly, or by using GitHub CLI.

   GitHub CLI is an open source tool for using GitHub from your computer's command line. GitHub CLI can simplify
   the process of adding an existing project to GitHub using the command line. To learn more about GitHub CLI, see
   "About GitHub CLI."

   Note: If you're most comfortable with a point-and-click user interface, consider adding your project with
   GitHub Desktop instead. For more information, see "Adding a repository from your local computer to GitHub
   Desktop."

   If your source code is tracked by a different VCS, such as Mercurial, Subversion, or Team Foundation Version
   Control, you must convert the repository to Git before you can add the project to GitHub.
     * "Importing a Subversion repository"
     * "Importing a Mercurial repository"
     * "Importing a Team Foundation Version Control repository"

   Warning: Never git add, commit, or push sensitive information to a remote repository. Sensitive information can
   include, but is not limited to:
     * Passwords
     * SSH keys
     * AWS access keys
     * API keys
     * Credit card numbers
     * PIN numbers

   For more information, see "Removing sensitive data from a repository."

Initializing a Git repository

   If your locally-hosted code isn't tracked by any VCS, the first step is to initialize a Git repository. If your
   project is already tracked by Git, skip to "Importing a Git repository with the command line."
    1. Open TerminalTerminalGit Bash.
    2. Navigate to the root directory of your project.
    3. Initialize the local directory as a Git repository. By default, the initial branch is called main.
       If you’re using Git 2.28.0 or a later version, you can set the name of the default branch using -b.
git init -b main
       If you’re using Git 2.27.1 or an earlier version, you can set the name of the default branch using git
       symbolic-ref.
git init && git symbolic-ref HEAD refs/heads/main
    4. Add the files in your new local repository. This stages them for the first commit.
$ git add .
# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.
    5. Commit the files that you've staged in your local repository.
$ git commit -m "First commit"
# Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify th
e file, use 'git reset --soft HEAD~1' and commit and add the file again.

Importing a Git repository with the command line

   After you've initialized a Git repository, you can push the repository to GitHub, using either GitHub CLI or
   Git.
     * "Adding a local repository to GitHub with GitHub CLI"
     * "Adding a local repository to GitHub using Git"

Adding a local repository to GitHub with GitHub CLI

    1. To create a repository for your project on GitHub, use the gh repo create subcommand. When prompted, select
       Push an existing local repository to GitHub and enter the desired name for your repository. If you want
       your project to belong to an organization instead of your user account, specify the organization name and
       project name with organization-name/project-name.
    2. Follow the interactive prompts. To add the remote and push the repository, confirm yes when asked to add
       the remote and push the commits to the current branch.
    3. Alternatively, to skip all the prompts, supply the path to the repository with the --source flag and pass a
       visibility flag (--public, --private, or --internal). For example, gh repo create --source=. --public.
       Specify a remote with the --remote flag. To push your commits, pass the --push flag. For more information
       about possible arguments, see the GitHub CLI manual.

Adding a local repository to GitHub using Git

    1. Create a new repository on GitHub.com. To avoid errors, do not initialize the new repository with README,
       license, or gitignore files. You can add these files after your project has been pushed to GitHub. For more
       information, see "Creating a new repository."
    2. At the top of your repository on GitHub.com's Quick Setup page, click to copy the remote repository URL.
       Screenshot of the "Quick Setup" header in a repository. Next to the remote URL, an icon of two overlapping
       squares is highlighted with an orange outline.
    3. Open TerminalTerminalGit Bash.
    4. Change the current working directory to your local project.
    5. Add the URL for the remote repository where your local repository will be pushed.
$ git remote add origin <REMOTE_URL>
# Sets the new remote
$ git remote -v
# Verifies the new remote URL
    6. Push the changes in your local repository to GitHub.com.
$ git push -u origin main
# Pushes the changes in your local repository up to the remote repository you specified as the origin

    1. Create a new repository on GitHub.com. To avoid errors, do not initialize the new repository with README,
       license, or gitignore files. You can add these files after your project has been pushed to GitHub. For more
       information, see "Creating a new repository."
    2. At the top of your repository on GitHub.com's Quick Setup page, click to copy the remote repository URL.
       Screenshot of the "Quick Setup" header in a repository. Next to the remote URL, an icon of two overlapping
       squares is highlighted with an orange outline.
    3. Open TerminalTerminalGit Bash.
    4. Change the current working directory to your local project.
    5. In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
$ git remote add origin <REMOTE_URL>
# Sets the new remote
$ git remote -v
# Verifies the new remote URL
    6. Push the changes in your local repository to GitHub.com.
$ git push origin main
# Pushes the changes in your local repository up to the remote repository you specified as the origin

    1. Create a new repository on GitHub.com. To avoid errors, do not initialize the new repository with README,
       license, or gitignore files. You can add these files after your project has been pushed to GitHub. For more
       information, see "Creating a new repository."
    2. At the top of your repository on GitHub.com's Quick Setup page, click to copy the remote repository URL.
       Screenshot of the "Quick Setup" header in a repository. Next to the remote URL, an icon of two overlapping
       squares is highlighted with an orange outline.
    3. Open TerminalTerminalGit Bash.
    4. Change the current working directory to your local project.
    5. Add the URL for the remote repository where your local repository will be pushed.
$ git remote add origin <REMOTE_URL>
# Sets the new remote
$ git remote -v
# Verifies the new remote URL
    6. Push the changes in your local repository to GitHub.com.
$ git push origin main
# Pushes the changes in your local repository up to the remote repository you specified as the origin

Further reading

     * "Adding a file to a repository"

Help and support

Did this doc help you?

   ____________________
   (*) ( )
   Privacy policy

Help us make these docs great!

   All GitHub docs are open source. See something that's wrong or unclear? Submit a pull request.
   Make a contribution

   Learn how to contribute

Still need help?

   Ask the GitHub community
   Contact support

Legal

     * © 2023 GitHub, Inc.
     * Terms
     * Privacy
     * Status
     * Pricing
     * Expert services
     * Blog

   (BUTTON)
